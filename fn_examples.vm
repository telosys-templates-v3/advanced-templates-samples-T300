/*
 * Text file generated by $generator.name ( version $generator.version )
 * Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
 */

"${DOLLAR}fn" object examples :
-------------------------------

Lower/Upper cases :

 ${DOLLAR}fn.capitalize("aaaa") :  $fn.capitalize("aaaa")
 ${DOLLAR}fn.capitalize("AAAA") :  $fn.capitalize("AAAA")

 ${DOLLAR}fn.firstCharToUpperCase("bbbb") :  $fn.firstCharToUpperCase("bbbb")  ( old fashion )

 ${DOLLAR}fn.uncapitalize("aaaa") :  $fn.uncapitalize("aaaa")
 ${DOLLAR}fn.uncapitalize("AAAA") :  $fn.uncapitalize("AAAA")

 ${DOLLAR}fn.toLowerCase("AbCdE") : $fn.toLowerCase("AbCdE")
 ${DOLLAR}fn.toUpperCase("AbCdE") : $fn.toUpperCase("AbCdE")

Character escaping :

 ${DOLLAR}fn.escapeXml("aaa->foo bbb<>ccc" ) :  $fn.escapeXml("aaa->foo bbb<>ccc" )

 ${DOLLAR}fn.backslash("abc;dedg;rrr", ";" ) :  $fn.backslash("abc;dedg;rrr", ";" )

Int values :

 ${DOLLAR}fn.buildIntValues(5) : 5 values ( from 1 to 5 )
#set($val = $fn.buildIntValues(5) )
#foreach($v in $val )
 . $v
#end

 ${DOLLAR}fn.buildIntValues(5, 20) : 5 values ( from 20 to 24 )
#set($val = $fn.buildIntValues(5,20) )
#foreach($v in $val )
 . $v
#end

 ${DOLLAR}fn.get("FOO", "FOO not found" ) : $fn.get("FOO", "FOO not found" )
Setting "FOO"...
#set($FOO = "foo" )
 ${DOLLAR}fn.get("FOO", "FOO not found" ) : $fn.get("FOO", "FOO not found" )

#using("FOO")
## #using("FOO2") : ERROR because "FOO2" is not defined 
#if ( $fn.isDefined("FOO") ) 
"FOO" is defined
#else
"FOO" is not defined
#end
#if ( $fn.isDefined("FOO2") ) 
"FOO2" is defined
#else
"FOO2" is not defined
#end

 ${DOLLAR}fn.isBlank("") : $fn.isBlank("") 
 ${DOLLAR}fn.isBlank("   ") : $fn.isBlank("   ") 
 ${DOLLAR}fn.isBlank(" A ") : $fn.isBlank(" A ") 

 ${DOLLAR}fn.quote("abc") : $fn.quote("abc")
 ${DOLLAR}FOO : $FOO
 ${DOLLAR}fn.quote(${DOLLAR}FOO) : $fn.quote($FOO)

--- Collections :
 ${DOLLAR}fn.size([]) : $fn.size([]) 
 ${DOLLAR}fn.size([1,2]) : $fn.size([1,2]) 

 ${DOLLAR}fn.isVoid([]) : $fn.isVoid([]) 
 ${DOLLAR}fn.isVoid([1,2]) : $fn.isVoid([1,2]) 

 ${DOLLAR}fn.isNotVoid([]) : $fn.isNotVoid([])
 ${DOLLAR}fn.isNotVoid([1,2,3]) : $fn.isNotVoid([1,2,3])

 ${DOLLAR}fn.concatLists([1,2,3], [10,11,12]) : $fn.concatLists([1,2,3], [10,11,12])

--- Play with defined/undefined variables
#set ( $FOO1 = "FooValue1" )
FOO1 has been set = "$FOO1"

 ${DOLLAR}fn.isDefined("FOO1") = $fn.isDefined("FOO1")    ( true expected )
 ${DOLLAR}fn.isDefined("FOO2") = $fn.isDefined("FOO2")    ( false expected )
 
 "${DOLLAR}fn.get("FOO1", "defaultValue1")" = "$fn.get("FOO1", "defaultValue1")" 
 "${DOLLAR}fn.get("FOO2", "defaultValue2")" = "$fn.get("FOO2", "defaultValue2")" 
